// Generated by gencpp from file ai_robot_rctl_server/RctlMapMetaData.msg
// DO NOT EDIT!


#ifndef AI_ROBOT_RCTL_SERVER_MESSAGE_RCTLMAPMETADATA_H
#define AI_ROBOT_RCTL_SERVER_MESSAGE_RCTLMAPMETADATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <nav_msgs/MapMetaData.h>

namespace ai_robot_rctl_server
{
template <class ContainerAllocator>
struct RctlMapMetaData_
{
  typedef RctlMapMetaData_<ContainerAllocator> Type;

  RctlMapMetaData_()
    : name()
    , data()  {
    }
  RctlMapMetaData_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef  ::nav_msgs::MapMetaData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> const> ConstPtr;

}; // struct RctlMapMetaData_

typedef ::ai_robot_rctl_server::RctlMapMetaData_<std::allocator<void> > RctlMapMetaData;

typedef boost::shared_ptr< ::ai_robot_rctl_server::RctlMapMetaData > RctlMapMetaDataPtr;
typedef boost::shared_ptr< ::ai_robot_rctl_server::RctlMapMetaData const> RctlMapMetaDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator1> & lhs, const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator1> & lhs, const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ai_robot_rctl_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b49a4f33aa8f12c7f46b99506f489601";
  }

  static const char* value(const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb49a4f33aa8f12c7ULL;
  static const uint64_t static_value2 = 0xf46b99506f489601ULL;
};

template<class ContainerAllocator>
struct DataType< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ai_robot_rctl_server/RctlMapMetaData";
  }

  static const char* value(const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String name\n"
"nav_msgs/MapMetaData data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/MapMetaData\n"
"# This hold basic information about the characterists of the OccupancyGrid\n"
"\n"
"# The time at which the map was loaded\n"
"time map_load_time\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"# Map width [cells]\n"
"uint32 width\n"
"# Map height [cells]\n"
"uint32 height\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RctlMapMetaData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ai_robot_rctl_server::RctlMapMetaData_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::nav_msgs::MapMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AI_ROBOT_RCTL_SERVER_MESSAGE_RCTLMAPMETADATA_H
