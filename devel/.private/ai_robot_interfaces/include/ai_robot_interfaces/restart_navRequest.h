// Generated by gencpp from file ai_robot_interfaces/restart_navRequest.msg
// DO NOT EDIT!


#ifndef AI_ROBOT_INTERFACES_MESSAGE_RESTART_NAVREQUEST_H
#define AI_ROBOT_INTERFACES_MESSAGE_RESTART_NAVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ai_robot_interfaces
{
template <class ContainerAllocator>
struct restart_navRequest_
{
  typedef restart_navRequest_<ContainerAllocator> Type;

  restart_navRequest_()
    : in(false)  {
    }
  restart_navRequest_(const ContainerAllocator& _alloc)
    : in(false)  {
  (void)_alloc;
    }



   typedef uint8_t _in_type;
  _in_type in;





  typedef boost::shared_ptr< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> const> ConstPtr;

}; // struct restart_navRequest_

typedef ::ai_robot_interfaces::restart_navRequest_<std::allocator<void> > restart_navRequest;

typedef boost::shared_ptr< ::ai_robot_interfaces::restart_navRequest > restart_navRequestPtr;
typedef boost::shared_ptr< ::ai_robot_interfaces::restart_navRequest const> restart_navRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator1> & lhs, const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator2> & rhs)
{
  return lhs.in == rhs.in;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator1> & lhs, const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ai_robot_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e55039fca2a84e0cfe80e419f0bfb3a";
  }

  static const char* value(const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e55039fca2a84e0ULL;
  static const uint64_t static_value2 = 0xcfe80e419f0bfb3aULL;
};

template<class ContainerAllocator>
struct DataType< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ai_robot_interfaces/restart_navRequest";
  }

  static const char* value(const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool in\n"
;
  }

  static const char* value(const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.in);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct restart_navRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ai_robot_interfaces::restart_navRequest_<ContainerAllocator>& v)
  {
    s << indent << "in: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AI_ROBOT_INTERFACES_MESSAGE_RESTART_NAVREQUEST_H
