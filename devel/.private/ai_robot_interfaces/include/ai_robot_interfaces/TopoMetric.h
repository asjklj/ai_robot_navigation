// Generated by gencpp from file ai_robot_interfaces/TopoMetric.msg
// DO NOT EDIT!


#ifndef AI_ROBOT_INTERFACES_MESSAGE_TOPOMETRIC_H
#define AI_ROBOT_INTERFACES_MESSAGE_TOPOMETRIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>

namespace ai_robot_interfaces
{
template <class ContainerAllocator>
struct TopoMetric_
{
  typedef TopoMetric_<ContainerAllocator> Type;

  TopoMetric_()
    : vertices()
    , edges()  {
    }
  TopoMetric_(const ContainerAllocator& _alloc)
    : vertices(_alloc)
    , edges(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PointStamped_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::PointStamped_<ContainerAllocator> >> _vertices_type;
  _vertices_type vertices;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _edges_type;
  _edges_type edges;





  typedef boost::shared_ptr< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> const> ConstPtr;

}; // struct TopoMetric_

typedef ::ai_robot_interfaces::TopoMetric_<std::allocator<void> > TopoMetric;

typedef boost::shared_ptr< ::ai_robot_interfaces::TopoMetric > TopoMetricPtr;
typedef boost::shared_ptr< ::ai_robot_interfaces::TopoMetric const> TopoMetricConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator1> & lhs, const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator2> & rhs)
{
  return lhs.vertices == rhs.vertices &&
    lhs.edges == rhs.edges;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator1> & lhs, const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ai_robot_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db10479c554715cffb6327317209d0b6";
  }

  static const char* value(const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb10479c554715cfULL;
  static const uint64_t static_value2 = 0xfb6327317209d0b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ai_robot_interfaces/TopoMetric";
  }

  static const char* value(const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped[] vertices\n"
"int32[] edges\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vertices);
      stream.next(m.edges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopoMetric_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ai_robot_interfaces::TopoMetric_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ai_robot_interfaces::TopoMetric_<ContainerAllocator>& v)
  {
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "edges[]" << std::endl;
    for (size_t i = 0; i < v.edges.size(); ++i)
    {
      s << indent << "  edges[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.edges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AI_ROBOT_INTERFACES_MESSAGE_TOPOMETRIC_H
